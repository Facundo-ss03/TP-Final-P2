
import java.util.HashMap;
import java.util.HashSet;
import java.util.Objects;

public class Funcion {
    
    public Funcion(Sede sede, double precio, String fecha){
        
    	if(sede == null) {
    		throw new RuntimeException("Error: la sede es nula.");
    	}
    	if(precio < 0) {
    		throw new RuntimeException("Error: el precio es inválido.");
        }
        if(fecha.trim().isEmpty()){
            throw new RuntimeException("Error: la fecha es inválida");
        }
    	this.fecha = new Fecha(fecha);
        this.sede = sede;
        this.precioBase = precio;

        if(sede instanceof SedesConPlateas){

            SedesConPlateas cast = (SedesConPlateas) sede;
            this.asientosVendidos = new HashMap<String, HashSet<String>>();

            for (String sector : cast.listarSectores()) {
                
                asientosVendidos.put(sector, new HashSet<>());

            }

        } else {

            this.asientosVendidosEstadio = 0;
        
        }
    }

    private Fecha fecha; 
    private Sede sede;
    private double precioBase;
    private HashMap<String, HashSet<String>> asientosVendidos;  //<codigoEntrada, nroAsiento>  //anularEntrada() debe eliminar de este mapa los asientos de las entradas anuladas
    private int asientosVendidosEstadio;

    public Entrada crearEntrada(String emailUsuario, String nombreDeEspectaculo, String fechaDeFuncion) {

    	if(emailUsuario.trim().isEmpty()) {
    		throw new RuntimeException("Error: el email está vacío.");	
    	}
    	if(nombreDeEspectaculo.trim().isEmpty()) {
    		throw new RuntimeException("Error: el nombre de espectáculo está vacío.");	
    	}
    	if(fechaDeFuncion.trim().isEmpty()) {
    		throw new RuntimeException("Error: la fecha está vacía.");	
    	}
    	
        if(consultarDisponibilidadDeAsiento()){

            Fecha fecha = new Fecha(fechaDeFuncion);
            
            Entrada entrada = new Entrada(emailUsuario, nombreDeEspectaculo, sede.getNombre(), fecha, precioBase);
            asientosVendidosEstadio++;
    
            return entrada;

        } else {
            throw new RuntimeException("Error: no hay entradas disponibles (el estadio está lleno).");
        }

    }

    public Entrada crearEntrada(String emailUsuario, String nombreDeEspectaculo,
                                String sector, int asiento) {
   	
        Entrada entrada;
        
        if(consultarDisponibilidadDeAsiento(asiento)){
                
	        String ubicacion = sede.getUbicacionDeAsiento(sector, asiento);
	
            double precioFinal = sede.calcularCostoFinal(sector, precioBase);
	
            entrada = new Entrada(emailUsuario, nombreDeEspectaculo, sede.getNombre(), sector, ubicacion, fecha, precioFinal);
            asientosVendidos.get(sector).add(ubicacion);
	
            return entrada;
	            
        } else {
               throw new RuntimeException("El asiento solicitado no está disponible.");
        }
    }

    private boolean consultarDisponibilidadDeAsiento(){
        if(asientosVendidosEstadio < sede.getCapacidadMaxima()) return true;
            else return false;
    }

    private boolean consultarDisponibilidadDeAsiento(int asiento){
    	
    	if(asiento <= 0) {
    		throw new RuntimeException("Error: el asiento es negativo o cero.");	
    	}
    	
        if(asientosVendidos.values().contains(asiento)) return false;
            else return true;
    }

    public void  quitarEntrada(String sector, String asiento){
    	
        asientosVendidos.get(sector).remove(asiento);    

    }

    public void quitarEntrada(){
        asientosVendidosEstadio -= 1;
    }

    public double calcularCostoEntrada(){

        return sede.calcularCostoFinal(sede.getUbicacionDeAsiento(), precioBase);

    }
    
    public String getNombreSede(){
        return sede.getNombre();
    }


    public double calcularCostoEntrada(String sector){

        return sede.calcularCostoFinal(sector, precioBase);
    
    }

    @Override
    public boolean equals(Object obj) {
        if(this == obj) return true;
        if(obj == null || getClass() != obj.getClass()) return false;

        Funcion funcion = (Funcion) obj;
        return Objects.equals(precioBase, funcion.precioBase) && Objects.equals(sede, funcion.sede) && Objects.equals(fecha, funcion.fecha);
    }

    @Override
    public int hashCode() {
        return Objects.hash(sede, fecha);
    }

    @Override
    public String toString() {
        
        StringBuilder sb = new StringBuilder();

        if(asientosVendidos == null){

            sb.append(sede.getNombre() + " - ");
            sb.append(asientosVendidosEstadio + "/" + sede.getCapacidadMaxima());
            sb.append("\n");
    
        } else {

            sb.append(sede.getNombre() + " - ");
            for (String sector : sede.listarSectores()) {

                sb.append(sector + ": ");
                sb.append(asientosVendidos.get(sector).size());
                sb.append("/" + sede.getCapacidadMaxima(sector));
                sb.append(" | ");
                
            }

            if(sb.length() > 3){
                sb.setLength(sb.length()-3);
            }

        }

        return sb.toString();

    }

}
